#!/usr/bin/env python3
"""
Maniforge - Kubernetes App Platform
A Terraform-like tool for managing Kubernetes applications
"""

import sys
import argparse
from pathlib import Path

# Add the directory containing maniforge_lib to the Python path
sys.path.insert(0, str(Path(__file__).parent))

from maniforge_lib.core import Maniforge


def main():
    parser = argparse.ArgumentParser(description='Maniforge - Kubernetes App Platform')
    parser.add_argument('--config', '-c', default='maniforge.yaml', help='Configuration file')
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # init command
    init_parser = subparsers.add_parser('init', help='Initialize a new project')
    init_parser.add_argument('--cluster', default='firefly', help='Cluster name')
    
    # plan command
    subparsers.add_parser('plan', help='Show what changes would be made')
    
    # apply command
    subparsers.add_parser('apply', help='Apply changes')
    
    # validate command
    subparsers.add_parser('validate', help='Validate configuration')
    
    # generate-profiles command
    gen_profiles_parser = subparsers.add_parser('generate-profiles', help='Generate Kubernetes resource profile components')
    gen_profiles_parser.add_argument('--output', '-o', help='Output directory (default: _components/resource-profiles)')
    gen_profiles_parser.add_argument('--profiles-yaml', default='resource-profiles.yaml', help='Resource profiles YAML file')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    if args.command == 'init':
        Maniforge.init(args.config, args.cluster)
        return
    
    if args.command == 'generate-profiles':
        Maniforge.generate_profiles(args.output, args.profiles_yaml)
        return
    
    maniforge = Maniforge(args.config)
    maniforge.load_config()
    
    if args.command == 'plan':
        has_changes = maniforge.plan()
        sys.exit(1 if has_changes else 0)  # Terraform-like exit codes
    
    elif args.command == 'apply':
        maniforge.apply()
    
    elif args.command == 'validate':
        if maniforge.validate():
            print("âœ… Configuration is valid")
        else:
            sys.exit(1)


if __name__ == '__main__':
    main()
